- form_for(location) do |f|
  %p
    %b Name
    %br/
    = f.text_field :name
  %p
    %b Hidden
    = f.check_box :hidden

  - if current_user.has_role?(:administrator)
    %p
      %b Owner
      %br/
      = text_field_with_auto_complete :user, :login, :autocomplete => "off"

  %p
    %b URL
    %br/
    = f.text_field :url
  %p
    %b Address
    %br/
    = f.text_field :street_address
  %p
    %b City
    %br/
    = f.text_field :city
  %p
    :javascript
      selections = #{state_select_hash.to_json};
      textField = #{f.text_field(:state).to_json};
      function updateStateInput(countrySelect) {
        countryValue = countrySelect.options[countrySelect.selectedIndex].value
        selectList = selections[countryValue];
        stateElement = $('location_state')
        stateValue = stateElement.getValue()

        Element.replace(stateElement, selectList || textField);

        if(stateValue != '--') {
          $('location_state').value = stateValue
        }
      }
    %b Country
    %br/
    = select :location, :country, [['Please select a country', '--']].concat(COUNTRY_TO_ABBREV.to_a.sort), {}, :onchange => 'updateStateInput(this)'
  %p
    %b State/Province
    %br/
    - if state_abbrevs=STATE_TO_ABBREV[@location.country]
      = select :location, :state, [['Please select a state/province', '--']].concat(state_abbrevs.to_a.sort)
    - else
      = f.text_field :state
  %p
    %b Zip/Postal code
    %br/
    = f.text_field :zip_code
  %p
    %b Description
    %br/
    = f.text_area :description
  %p
    %b Contacts
    :javascript
      document.write('#{escape_javascript(link_to("add contact", "javascript:add_contact()"))}');
    #contacts
      %noscript
        %p
          Note: If you wish to add more contacts, fill out the existing contact fields, save this form,
          and edit the location again.  Additional blank contact fields will appear.
      - contacts = location.contacts || [{}]
      - contacts.each_with_index do |contact, i|
        = render :partial => "contact_form", :locals => {:contact => contact, :contact_idx => i }
      %noscript
        - (contacts.length...contacts.length+3).each do |i|
          = render :partial => 'contact_form', :locals => {:contact => {}, :noscript => true, :contact_idx => i}
    :javascript
      current_contacts = #{contacts.length};
      current_phones = [#{contacts.collect{|c| c[:phone] ? c[:phone].length : 0}.join(', ')}]
      function add_contact() {
        new_contact =
          '#{@contact_form}'.replace(/CONTACT_IDX/g, current_contacts);
        appendHTML($('contacts'), new_contact);
        current_phones[current_contacts] = 1
        current_contacts++;
      }

      function add_phone(contact_idx) {
        new_phone = '#{@phone_form}';
        new_phone = new_phone.replace(/CONTACT_IDX/g, contact_idx);
        new_phone = new_phone.replace(/PHONE_IDX/g, current_phones[contact_idx]);

        appendHTML($('phones_'+contact_idx), new_phone)
        current_phones[contact_idx]++;
      }

      function appendHTML(elem, html) {
        newdiv = document.createElement("div")
        newdiv.innerHTML = html
        elem.appendChild(newdiv);
      }
  %p
    %b Hours
    %br/
    = f.text_field :hours
  %p
    = f.submit "Update"
